{"version":3,"sources":["types.ts"],"names":["PluginType","UpdateType","EventType"],"mappings":"AA+LA;AACA;AACA;AAoEA,WAAYA,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAaZ,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAKZ,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S","sourcesContent":["export type JsonValue =\n  | boolean\n  | number\n  | string\n  | null\n  | JsonList\n  | JsonMap\n  | undefined;\nexport interface JsonMap {\n  [key: string]: JsonValue;\n  [index: number]: JsonValue;\n}\nexport interface JsonList extends Array<JsonValue> {}\n\nexport type SegmentEvent =\n  | TrackEventType\n  | ScreenEventType\n  | IdentifyEventType\n  | GroupEventType\n  | AliasEventType;\n\ninterface BaseEventType {\n  anonymousId?: string;\n  messageId?: string;\n  userId?: string;\n  timestamp?: string;\n\n  context?: PartialContext;\n  integrations?: SegmentAPIIntegrations;\n}\n\nexport interface TrackEventType extends BaseEventType {\n  type: EventType.TrackEvent;\n  event: string;\n  properties?: JsonMap;\n  timestamp?: string;\n}\n\nexport interface ScreenEventType extends BaseEventType {\n  type: EventType.ScreenEvent;\n  name: string;\n  properties: JsonMap;\n}\n\nexport interface IdentifyEventType extends BaseEventType {\n  type: EventType.IdentifyEvent;\n  traits: UserTraits;\n}\n\nexport interface GroupEventType extends BaseEventType {\n  type: EventType.GroupEvent;\n  groupId: string;\n  traits: GroupTraits;\n}\n\nexport interface AliasEventType extends BaseEventType {\n  type: EventType.AliasEvent;\n  userId?: string;\n  previousId: string;\n}\n\nexport type UserTraits = JsonMap & {\n  address?: {\n    city?: string;\n    country?: string;\n    postalCode?: string;\n    state?: string;\n    street?: string;\n  };\n  age?: number;\n  avatar?: string;\n  birthday?: string;\n  company?: {\n    name?: string;\n    id?: string | number;\n    industry?: string;\n    employee_count?: number;\n    plan?: string;\n  };\n  createdAt?: string;\n  description?: string;\n  email?: string;\n  firstName?: string;\n  gender?: string;\n  id?: string;\n  lastName?: string;\n  name?: string;\n  phone?: string;\n  title?: string;\n  username?: string;\n  website?: string;\n};\n\nexport type GroupTraits = JsonMap & {\n  address?: {\n    city?: string;\n    country?: string;\n    postalCode?: string;\n    state?: string;\n    street?: string;\n  };\n  avatar?: string;\n  createdAt?: string;\n  description?: string;\n  email?: string;\n  employees?: string;\n  id?: string;\n  industry?: string;\n  name?: string;\n  phone?: string;\n  website?: string;\n  plan?: string;\n};\n\nexport type Config = {\n  writeKey: string;\n  debug?: boolean;\n  flushAt?: number;\n  flushInterval?: number;\n  trackAppLifecycleEvents?: boolean;\n  retryInterval?: number;\n  maxBatchSize?: number;\n  trackDeepLinks?: boolean;\n  maxEventsToRetry?: number;\n  defaultSettings?: SegmentAPISettings;\n  autoAddSegmentDestination?: boolean;\n  collectDeviceId?: boolean;\n};\n\nexport type ClientMethods = {\n  screen: (name: string, properties?: JsonMap) => void;\n  track: (event: string, properties?: JsonMap, timestamp?: string) => void;\n  identify: (userId: string, userTraits?: UserTraits) => void;\n  flush: () => Promise<void>;\n  group: (groupId: string, groupTraits?: GroupTraits) => void;\n  alias: (newUserId: string) => void;\n  reset: () => void;\n};\n\ntype ContextApp = {\n  build: string;\n  name: string;\n  namespace: string;\n  version: string;\n};\n\nexport type ContextDevice = {\n  id?: string;\n  manufacturer: string;\n  model: string;\n  name: string;\n  type: string;\n\n  adTrackingEnabled?: boolean; // ios only\n  advertisingId?: string; // ios only\n  trackingStatus?: string;\n};\n\ntype ContextLibrary = {\n  name: string;\n  version: string;\n};\n\ntype ContextNetwork = {\n  cellular: boolean;\n  wifi: boolean;\n};\n\ntype ContextOS = {\n  name: string;\n  version: string;\n};\n\ntype ContextScreen = {\n  height: number;\n  width: number;\n  density?: number; // android only\n};\n\nexport type Context = {\n  app: ContextApp;\n  device: ContextDevice;\n  library: ContextLibrary;\n  locale: string;\n  network: ContextNetwork;\n  os: ContextOS;\n  screen: ContextScreen;\n  timezone: string;\n  traits: UserTraits;\n};\n\n/**\n * Makes all the properties in an object optional\n */\nexport type DeepPartial<T> = {\n  [Property in keyof T]?: Property extends {}\n    ? DeepPartial<T[Property]>\n    : T[Property];\n};\n\nexport type PartialContext = DeepPartial<Context>;\n\nexport type NativeContextInfo = {\n  appName: string;\n  appVersion: string;\n  buildNumber: string;\n  bundleId: string;\n  locale: string;\n  networkType: string;\n  osName: string;\n  osVersion: string;\n  screenHeight: number;\n  screenWidth: number;\n  screenDensity?: number; // android only\n  timezone: string;\n  manufacturer: string;\n  model: string;\n  deviceName: string;\n  deviceId?: string;\n  deviceType: string;\n  adTrackingEnabled?: boolean; // ios only\n  advertisingId?: string; // ios only\n};\n\nexport type SegmentAPIIntegration = {\n  apiKey: string;\n  apiHost: string;\n};\n\ntype SegmentAmplitudeIntegration = {\n  session_id: number;\n};\n\nexport type SegmentAdjustSettings = {\n  appToken: string;\n  setEnvironmentProduction?: boolean;\n  setEventBufferingEnabled?: boolean;\n  trackAttributionData?: boolean;\n  setDelay?: boolean;\n  customEvents?: { [key: string]: string };\n  delayTime?: number;\n};\n\nexport type IntegrationSettings =\n  // Strongly typed known integration settings\n  | SegmentAPIIntegration\n  | SegmentAmplitudeIntegration\n  | SegmentAdjustSettings\n  // Support any kind of configuration in the future\n  | Record<string, any>\n  // enable/disable the integration at cloud level\n  | boolean;\n\nexport type SegmentAPIIntegrations = {\n  [key: string]: IntegrationSettings;\n};\n\nexport type SegmentAPISettings = {\n  integrations: SegmentAPIIntegrations;\n};\n\nexport enum PluginType {\n  // Executed before event processing begins.\n  'before' = 'before',\n  // Executed as the first level of event processing.\n  'enrichment' = 'enrichment',\n  // Executed as events begin to pass off to destinations.\n  'destination' = 'destination',\n  // Executed after all event processing is completed.  This can be used to perform cleanup operations, etc.\n  'after' = 'after',\n  // Executed only when called manually, such as Logging.\n  'utility' = 'utility',\n}\n\nexport enum UpdateType {\n  'initial' = 'initial',\n  'refresh' = 'refresh',\n}\n\nexport enum EventType {\n  'TrackEvent' = 'track',\n  'IdentifyEvent' = 'identify',\n  'ScreenEvent' = 'screen',\n  'GroupEvent' = 'group',\n  'AliasEvent' = 'alias',\n}\n\nexport type UserInfoState = {\n  anonymousId: string;\n  userId?: string;\n  traits?: UserTraits;\n};\n"]}