{"version":3,"sources":["analytics.ts"],"names":["AppState","Linking","getContext","applyRawEventData","createAliasEvent","createGroupEvent","createIdentifyEvent","createScreenEvent","createTrackEvent","InjectContext","SegmentDestination","Timeline","PluginType","getPluginsWithFlush","getUUID","SegmentClient","platformPlugins","plugins","push","config","trackAppLifecycleEvents","getPlugins","ofType","timeline","undefined","before","enrichment","utility","destination","after","getConfig","constructor","logger","store","autoAddSegmentDestination","segmentDestination","add","plugin","forEach","context","get","set","onChange","adTrackingEnabled","device","callback","settings","userInfo","events","init","isInitialized","warn","isReady","onStorageReady","value","fetchSettings","flush","setupInterval","setupStorageSubscribers","setupLifecycleEvents","trackDeepLinks","checkInstalledVersion","settingsEndpoint","writeKey","res","fetch","resJson","json","info","defaultSettings","unsubscribeStorageWatchers","watchers","length","unsubscribe","e","error","cleanup","flushInterval","clearInterval","unsubscribeReadinessWatcher","appStateSubscription","remove","destroyed","setInterval","tick","flushAt","addEventListener","nextAppState","handleAppStateChange","apply","closure","type","key","isStorageReady","pluginsToAdd","addPlugin","configure","process","incomingEvent","event","url","getInitialURL","properties","readinessWatcher","isAddingPlugins","secondsElapsed","isPendingUpload","screen","name","options","track","eventName","timestamp","console","log","identify","userId","userTraits","traits","currentUserTraits","mergedTraits","group","groupId","groupTraits","alias","newUserId","anonymousId","queueEvent","removeEvents","previousContext","app","version","build","previous_version","previous_build","from_background","includes","appState","reset"],"mappings":"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","sourcesContent":["import { AppState, AppStateStatus, Linking } from 'react-native';\nimport type { Unsubscribe } from '@segment/sovran-react-native';\nimport { getContext } from './context';\n\nimport {\n  applyRawEventData,\n  createAliasEvent,\n  createGroupEvent,\n  createIdentifyEvent,\n  createScreenEvent,\n  createTrackEvent,\n} from './events';\nimport type { Logger } from './logger';\nimport type { DestinationPlugin, PlatformPlugin, Plugin } from './plugin';\nimport { InjectContext } from './plugins/Context';\nimport { SegmentDestination } from './plugins/SegmentDestination';\nimport type { Settable, Storage, Watchable } from './storage';\nimport { Timeline } from './timeline';\nimport {\n  Config,\n  Context,\n  DeepPartial,\n  GroupTraits,\n  JsonMap,\n  PluginType,\n  SegmentAPIIntegrations,\n  SegmentAPISettings,\n  SegmentEvent,\n  UserInfoState,\n  UserTraits,\n} from './types';\nimport { getPluginsWithFlush } from './util';\nimport { getUUID } from './uuid';\n\nexport class SegmentClient {\n  // the config parameters for the client - a merge of user provided and default options\n  private config: Config;\n\n  // Storage\n  private store: Storage;\n\n  // how many seconds has elapsed since the last time events were sent\n  private secondsElapsed: number = 0;\n\n  // current app state\n  private appState: AppStateStatus | 'unknown' = 'unknown';\n\n  // subscription for propagating changes to appState\n  private appStateSubscription: any;\n\n  // logger\n  public logger: Logger;\n\n  // internal time to know when to flush, ticks every second\n  private flushInterval: ReturnType<typeof setInterval> | null = null;\n\n  // Watcher for isReady updates to the storage\n  private readinessWatcher?: Unsubscribe = undefined;\n\n  // unsubscribe watchers for the store\n  private watchers: Unsubscribe[] = [];\n\n  // whether the user has called cleanup\n  private destroyed: boolean = false;\n\n  // has a pending upload to respond\n  private isPendingUpload: boolean = false;\n\n  private isAddingPlugins: boolean = false;\n\n  private timeline: Timeline;\n\n  // mechanism to prevent adding plugins before we are fully initalised\n  private isStorageReady = false;\n  private pluginsToAdd: Plugin[] = [];\n\n  private isInitialized = false;\n\n  get platformPlugins() {\n    const plugins: PlatformPlugin[] = [];\n\n    // add context plugin as well as it's platform specific internally.\n    // this must come first.\n    plugins.push(new InjectContext());\n\n    // setup lifecycle if desired\n    if (this.config.trackAppLifecycleEvents) {\n      // todo: more plugins!\n    }\n\n    return plugins;\n  }\n\n  // Watchables\n  /**\n   * Access or subscribe to client context\n   */\n  readonly context: Watchable<DeepPartial<Context> | undefined> &\n    Settable<DeepPartial<Context>>;\n\n  /**\n   * Access or subscribe to adTrackingEnabled (also accesible from context)\n   */\n  readonly adTrackingEnabled: Watchable<boolean>;\n\n  /**\n   * Access or subscribe to integration settings\n   */\n  readonly settings: Watchable<SegmentAPIIntegrations | undefined>;\n\n  /**\n   * Access or suscribe to the events in the timeline\n   */\n  readonly events: Watchable<SegmentEvent[]>;\n\n  /**\n   * Access or subscribe to user info (anonymousId, userId, traits)\n   */\n  readonly userInfo: Watchable<UserInfoState>;\n\n  /**\n   * Returns the plugins currently loaded in the timeline\n   * @param ofType Type of plugins, defaults to all\n   * @returns List of Plugin objects\n   */\n  getPlugins(ofType?: PluginType): readonly Plugin[] {\n    const plugins = { ...this.timeline.plugins };\n    if (ofType !== undefined) {\n      return [...(plugins[ofType] ?? [])];\n    }\n    return (\n      [\n        ...this.getPlugins(PluginType.before),\n        ...this.getPlugins(PluginType.enrichment),\n        ...this.getPlugins(PluginType.utility),\n        ...this.getPlugins(PluginType.destination),\n        ...this.getPlugins(PluginType.after),\n      ] ?? []\n    );\n  }\n\n  /**\n   * Retrieves a copy of the current client configuration\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n\n  constructor({\n    config,\n    logger,\n    store,\n  }: {\n    config: Config;\n    logger: Logger;\n    store: any;\n  }) {\n    this.logger = logger;\n    this.config = config;\n    this.store = store;\n    this.timeline = new Timeline();\n\n    // add segment destination plugin unless\n    // asked not to via configuration.\n    if (this.config.autoAddSegmentDestination) {\n      const segmentDestination = new SegmentDestination();\n      this.add({ plugin: segmentDestination });\n    }\n\n    // Setup platform specific plugins\n    this.platformPlugins.forEach((plugin) => this.add({ plugin: plugin }));\n\n    // Initialize the watchables\n    this.context = {\n      get: this.store.context.get,\n      set: this.store.context.set,\n      onChange: this.store.context.onChange,\n    };\n\n    this.adTrackingEnabled = {\n      get: () => this.store.context.get()?.device?.adTrackingEnabled ?? false,\n      onChange: (callback: (value: boolean) => void) =>\n        this.store.context.onChange((context?: DeepPartial<Context>) => {\n          callback(context?.device?.adTrackingEnabled ?? false);\n        }),\n    };\n\n    this.settings = {\n      get: this.store.settings.get,\n      onChange: this.store.settings.onChange,\n    };\n\n    this.userInfo = {\n      get: this.store.userInfo.get,\n      onChange: this.store.userInfo.onChange,\n    };\n\n    this.events = {\n      get: this.store.events.get,\n      onChange: this.store.events.onChange,\n    };\n  }\n\n  /**\n   * Initializes the client plugins, settings and subscribers.\n   * Can only be called once.\n   */\n  async init() {\n    if (this.isInitialized) {\n      this.logger.warn('SegmentClient already initialized');\n      return;\n    }\n\n    // Plugin interval check\n    if (this.store.isReady.get()) {\n      this.onStorageReady(true);\n    } else {\n      this.store.isReady.onChange((value) => this.onStorageReady(value));\n    }\n    await this.fetchSettings();\n\n    // flush any stored events\n    this.flush();\n\n    // set up the timer/subscription for knowing when to flush events\n    this.setupInterval();\n    this.setupStorageSubscribers();\n\n    // set up tracking for lifecycle events\n    this.setupLifecycleEvents();\n\n    // check if the app was opened from a deep link\n    await this.trackDeepLinks();\n\n    // save the current installed version\n    await this.checkInstalledVersion();\n\n    this.isInitialized = true;\n  }\n\n  async fetchSettings() {\n    const settingsEndpoint = `https://cdn-settings.segment.com/v1/projects/${this.config.writeKey}/settings`;\n\n    try {\n      const res = await fetch(settingsEndpoint);\n      const resJson = await res.json();\n      this.logger.info(`Received settings from Segment succesfully.`);\n      this.store.settings.set(resJson);\n    } catch {\n      this.logger.warn(\n        `Could not receive settings from Segment. ${\n          this.config.defaultSettings\n            ? 'Will use the default settings.'\n            : 'Device mode destinations will be ignored unless you specify default settings in the client config.'\n        }`\n      );\n      if (this.config.defaultSettings) {\n        this.store.settings.set(this.config.defaultSettings);\n      }\n    }\n  }\n\n  /**\n   * Clears all subscriptions to the store\n   */\n  private unsubscribeStorageWatchers() {\n    if (this.watchers.length > 0) {\n      for (const unsubscribe of this.watchers) {\n        try {\n          unsubscribe();\n        } catch (e) {\n          this.logger.error(e);\n        }\n      }\n    }\n  }\n\n  /**\n   * There is no garbage collection in JS, which means that any listeners, timeouts and subscriptions\n   * would run until the application closes\n   *\n   * This method exists in case the user for some reason needs to recreate the class instance during runtime.\n   * In this case, they should run client.cleanup() to destroy the listeners in the old client before creating a new one.\n   *\n   * There is a Stage 3 EMCAScript proposal to add a user-defined finalizer, which we could potentially switch to if\n   * it gets approved: https://github.com/tc39/proposal-weakrefs#finalizers\n   */\n  cleanup() {\n    if (this.flushInterval) {\n      clearInterval(this.flushInterval);\n    }\n\n    this.unsubscribeReadinessWatcher();\n    this.unsubscribeStorageWatchers();\n\n    this.appStateSubscription?.remove();\n\n    this.destroyed = true;\n    this.isInitialized = false;\n  }\n\n  private setupInterval() {\n    if (this.flushInterval !== null && this.flushInterval !== undefined) {\n      clearInterval(this.flushInterval);\n    }\n    this.flushInterval = setInterval(() => this.tick(), 1000) as any;\n  }\n\n  private setupStorageSubscribers() {\n    this.unsubscribeStorageWatchers();\n\n    this.watchers.push(\n      this.store.events.onChange((events: SegmentEvent[]) => {\n        if (events.length >= this.config.flushAt!) {\n          this.flush();\n        }\n      })\n    );\n  }\n\n  private setupLifecycleEvents() {\n    this.appStateSubscription?.remove();\n\n    this.appStateSubscription = AppState.addEventListener(\n      'change',\n      (nextAppState) => {\n        this.handleAppStateChange(nextAppState);\n      }\n    );\n  }\n\n  /**\n     Applies the supplied closure to the currently loaded set of plugins.\n     NOTE: This does not apply to plugins contained within DestinationPlugins.\n\n     - Parameter closure: A closure that takes an plugin to be operated on as a parameter.\n\n  */\n  apply(closure: (plugin: Plugin) => void) {\n    this.timeline.apply(closure);\n  }\n\n  /**\n   * Adds a new plugin to the currently loaded set.\n   * @param {{ plugin: Plugin, settings?: SegmentAPISettings }} Plugin to be added. Settings are optional if you want to force a configuration instead of the Segment Cloud received one\n   */\n  add({\n    plugin,\n    settings,\n  }: {\n    plugin: Plugin;\n    settings?: Plugin extends DestinationPlugin ? SegmentAPISettings : never;\n  }) {\n    // plugins can either be added immediately or\n    // can be cached and added later during the next state update\n    // this is to avoid adding plugins before network requests made as part of setup have resolved\n    if (settings !== undefined && plugin.type === PluginType.destination) {\n      this.store.settings.add((plugin as DestinationPlugin).key, settings);\n    }\n\n    if (!this.isStorageReady) {\n      this.pluginsToAdd.push(plugin);\n    } else {\n      this.addPlugin(plugin);\n    }\n  }\n\n  private addPlugin(plugin: Plugin) {\n    plugin.configure(this);\n    this.timeline.add(plugin);\n  }\n\n  /**\n     Removes and unloads plugins with a matching name from the system.\n\n     - Parameter pluginName: An plugin name.\n  */\n  remove({ plugin }: { plugin: Plugin }) {\n    this.timeline.remove(plugin);\n  }\n\n  process(incomingEvent: SegmentEvent) {\n    const event = applyRawEventData(incomingEvent, this.store.userInfo.get());\n    this.timeline.process(event);\n  }\n\n  private async trackDeepLinks() {\n    const url = await Linking.getInitialURL();\n\n    if (url && this.getConfig().trackDeepLinks) {\n      const event = createTrackEvent({\n        event: 'Deep Link Opened',\n        properties: {\n          url,\n        },\n      });\n      this.process(event);\n      this.logger.info('TRACK (Deep Link Opened) event saved', event);\n    }\n  }\n\n  private unsubscribeReadinessWatcher() {\n    this.readinessWatcher?.();\n  }\n\n  private onStorageReady(isReady: boolean) {\n    if (isReady && this.pluginsToAdd.length > 0 && !this.isAddingPlugins) {\n      this.isAddingPlugins = true;\n      try {\n        // start by adding the plugins\n        this.pluginsToAdd.forEach((plugin) => {\n          this.addPlugin(plugin);\n        });\n\n        // now that they're all added, clear the cache\n        // this prevents this block running for every update\n        this.pluginsToAdd = [];\n\n        // finally set the flag which means plugins will be added + registered immediately in future\n        this.isStorageReady = true;\n        this.unsubscribeReadinessWatcher();\n      } finally {\n        this.isAddingPlugins = false;\n      }\n    }\n  }\n\n  private tick() {\n    if (this.secondsElapsed + 1 >= this.config.flushInterval!) {\n      this.flush();\n    } else {\n      this.secondsElapsed += 1;\n    }\n  }\n\n  async flush() {\n    if (!this.isPendingUpload) {\n      this.isPendingUpload = true;\n      try {\n        if (this.destroyed) {\n          return;\n        }\n\n        this.secondsElapsed = 0;\n        const events = this.store.events.get();\n\n        if (events.length > 0) {\n          getPluginsWithFlush(this.timeline).forEach((plugin) =>\n            plugin.flush()\n          );\n        }\n      } finally {\n        this.isPendingUpload = false;\n      }\n    }\n  }\n\n  screen(name: string, options?: JsonMap) {\n    const event = createScreenEvent({\n      name,\n      properties: options,\n    });\n\n    this.process(event);\n    this.logger.info('SCREEN event saved', event);\n  }\n\n  track(eventName: string, options?: JsonMap, timestamp?: string) {\n    console.log('SEGMENT', eventName, options, timestamp)\n    const event = createTrackEvent({\n      event: eventName,\n      properties: options,\n      timestamp,\n    });\n\n    this.process(event);\n    this.logger.info('TRACK event saved', event);\n  }\n\n  identify(userId?: string, userTraits?: UserTraits) {\n    const userInfo = this.store.userInfo.get();\n    const { traits: currentUserTraits } = userInfo;\n\n    const mergedTraits = {\n      ...currentUserTraits,\n      ...userTraits,\n    };\n\n    const event = createIdentifyEvent({\n      userId,\n      userTraits: mergedTraits,\n    });\n\n    this.store.userInfo.set({\n      ...userInfo,\n      userId: userId ?? userInfo.userId,\n      traits: mergedTraits,\n    });\n\n    this.process(event);\n    this.logger.info('IDENTIFY event saved', event);\n  }\n\n  group(groupId: string, groupTraits?: GroupTraits) {\n    const event = createGroupEvent({\n      groupId,\n      groupTraits,\n    });\n\n    this.process(event);\n    this.logger.info('GROUP event saved', event);\n  }\n\n  alias(newUserId: string) {\n    const { anonymousId, userId } = this.userInfo.get();\n    const event = createAliasEvent({\n      anonymousId,\n      userId,\n      newUserId,\n    });\n\n    this.store.userInfo.set({\n      ...this.store.userInfo.get(),\n      userId: newUserId,\n    });\n\n    this.process(event);\n    this.logger.info('ALIAS event saved', event);\n  }\n\n  queueEvent(event: SegmentEvent) {\n    this.store.events.add(event);\n  }\n\n  removeEvents(event: SegmentEvent | SegmentEvent[]) {\n    this.store.events.remove(event);\n  }\n\n  /**\n   * Called once when the client is first created\n   *\n   * Detect and save the the currently installed application version\n   * Send application lifecycle events if trackAppLifecycleEvents is enabled\n   *\n   * Exactly one of these events will be sent, depending on the current and previous version:s\n   * Application Installed - no information on the previous version, so it's a fresh install\n   * Application Updated - the previous detected version is different from the current version\n   * Application Opened - the previously detected version is same as the current version\n   */\n  private async checkInstalledVersion() {\n    const context = await getContext(undefined, this.config);\n\n    const previousContext = this.store.context.get();\n\n    this.store.context.set(context);\n\n    if (!this.config.trackAppLifecycleEvents) {\n      return;\n    }\n\n    if (previousContext?.app === undefined) {\n      const event = createTrackEvent({\n        event: 'Application Installed',\n        properties: {\n          version: context.app.version,\n          build: context.app.build,\n        },\n      });\n      this.process(event);\n      this.logger.info('TRACK (Application Installed) event saved', event);\n    } else if (context.app.version !== previousContext.app.version) {\n      const event = createTrackEvent({\n        event: 'Application Updated',\n        properties: {\n          version: context.app.version,\n          build: context.app.build,\n          previous_version: previousContext.app.version,\n          previous_build: previousContext.app.build,\n        },\n      });\n      this.process(event);\n      this.logger.info('TRACK (Application Updated) event saved', event);\n    }\n\n    const event = createTrackEvent({\n      event: 'Application Opened',\n      properties: {\n        from_background: false,\n        version: context.app.version,\n        build: context.app.build,\n      },\n    });\n    this.process(event);\n    this.logger.info('TRACK (Application Opened) event saved', event);\n  }\n\n  /**\n   * AppState event listener. Called whenever the app state changes.\n   *\n   * Send application lifecycle events if trackAppLifecycleEvents is enabled.\n   *\n   * Application Opened - only when the app state changes from 'inactive' or 'background' to 'active'\n   *   The initial event from 'unknown' to 'active' is handled on launch in checkInstalledVersion\n   * Application Backgrounded - when the app state changes from 'inactive' or 'background' to 'active\n   *\n   * @param nextAppState 'active', 'inactive', 'background' or 'unknown'\n   */\n  private handleAppStateChange(nextAppState: AppStateStatus) {\n    if (this.config.trackAppLifecycleEvents) {\n      if (\n        ['inactive', 'background'].includes(this.appState) &&\n        nextAppState === 'active'\n      ) {\n        const context = this.store.context.get();\n        const event = createTrackEvent({\n          event: 'Application Opened',\n          properties: {\n            from_background: true,\n            version: context?.app?.version,\n            build: context?.app?.build,\n          },\n        });\n        this.process(event);\n        this.logger.info('TRACK (Application Opened) event saved', event);\n      } else if (\n        this.appState === 'active' &&\n        ['inactive', 'background'].includes(nextAppState)\n      ) {\n        const event = createTrackEvent({\n          event: 'Application Backgrounded',\n        });\n        this.process(event);\n        this.logger.info('TRACK (Application Backgrounded) event saved', event);\n      }\n    }\n\n    this.appState = nextAppState;\n  }\n\n  reset() {\n    this.store.userInfo.set({\n      anonymousId: getUUID(),\n      userId: undefined,\n      traits: undefined,\n    });\n    this.logger.info('Client has been reset');\n  }\n}\n"]}