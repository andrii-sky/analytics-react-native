{"version":3,"sources":["sovranStorage.ts"],"names":["createStore","getUUID","INITIAL_VALUES","isReady","events","eventsToRetry","context","settings","userInfo","anonymousId","userId","undefined","traits","SovranStorage","constructor","storeId","fixUnsubscribe","userInfoStore","subscribe","store","dispatch","state","get","onChange","_callback","contextStore","getState","callback","set","value","settingsStore","add","key","eventsStore","event","eventsToAdd","Array","isArray","remove","eventsToRemove","setToRemove","Set","filteredEvents","filter","e","has","persist","fixAnonymousId"],"mappings":"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","sourcesContent":["import { createStore, Store } from '@segment/sovran-react-native';\nimport type {\n  SegmentAPIIntegrations,\n  IntegrationSettings,\n  SegmentEvent,\n  DeepPartial,\n  Context,\n  UserInfoState,\n} from '..';\nimport { getUUID } from '../uuid';\nimport type { Storage } from './types';\n\ntype Data = {\n  isReady: boolean;\n  events: SegmentEvent[];\n  eventsToRetry: SegmentEvent[];\n  context: DeepPartial<Context>;\n  settings: SegmentAPIIntegrations;\n  userInfo: UserInfoState;\n};\nconst INITIAL_VALUES: Data = {\n  isReady: true,\n  events: [],\n  eventsToRetry: [],\n  context: {},\n  settings: {},\n  userInfo: {\n    anonymousId: getUUID(),\n    userId: undefined,\n    traits: undefined,\n  },\n};\n\nexport class SovranStorage implements Storage {\n  private storeId: string;\n  private contextStore: Store<{ context: DeepPartial<Context> }>;\n  private settingsStore: Store<{ settings: SegmentAPIIntegrations }>;\n  private eventsStore: Store<{ events: SegmentEvent[] }>;\n  private userInfoStore: Store<{ userInfo: UserInfoState }>;\n\n  constructor(storeId: string) {\n    this.storeId = storeId;\n    this.contextStore = createStore(\n      { context: INITIAL_VALUES.context },\n      {\n        persist: { storeId: `${this.storeId}-context` },\n      }\n    );\n    this.settingsStore = createStore(\n      { settings: INITIAL_VALUES.settings },\n      {\n        persist: { storeId: `${this.storeId}-settings` },\n      }\n    );\n    this.eventsStore = createStore(\n      { events: INITIAL_VALUES.events },\n      {\n        persist: { storeId: `${this.storeId}-events` },\n      }\n    );\n    this.userInfoStore = createStore(\n      { userInfo: INITIAL_VALUES.userInfo },\n      {\n        persist: {\n          storeId: `${this.storeId}-userInfo`,\n        },\n      }\n    );\n\n    this.fixAnonymousId();\n  }\n\n  /**\n   * This is a fix for users that have started the app with the anonymousId set to 'anonymousId' bug\n   */\n  private fixAnonymousId = () => {\n    const fixUnsubscribe = this.userInfoStore.subscribe((store) => {\n      if (store.userInfo.anonymousId === 'anonymousId') {\n        this.userInfoStore.dispatch((state) => {\n          return {\n            userInfo: { ...state.userInfo, anonymousId: getUUID() },\n          };\n        });\n      }\n      fixUnsubscribe();\n    });\n  };\n\n  readonly isReady = {\n    get: () => true,\n    onChange: (_callback: (value: boolean) => void) => {\n      // No need to do anything since storage is always ready\n      return () => {};\n    },\n  };\n\n  readonly context = {\n    get: () => this.contextStore.getState().context,\n    onChange: (callback: (value?: DeepPartial<Context>) => void) =>\n      this.contextStore.subscribe((store) => callback(store.context)),\n    set: (value: DeepPartial<Context>) => {\n      this.contextStore.dispatch((state) => {\n        return { context: { ...state.context, ...value } };\n      });\n    },\n  };\n  readonly settings = {\n    get: () => this.settingsStore.getState().settings,\n    onChange: (\n      callback: (value?: SegmentAPIIntegrations | undefined) => void\n    ) => this.settingsStore.subscribe((store) => callback(store.settings)),\n    set: (value: SegmentAPIIntegrations) => {\n      this.settingsStore.dispatch((state) => {\n        return { settings: { ...state.settings, ...value } };\n      });\n    },\n    add: (key: string, value: IntegrationSettings) => {\n      this.settingsStore.dispatch((state) => ({\n        settings: { ...state.settings, [key]: value },\n      }));\n    },\n  };\n  readonly events = {\n    get: () => this.eventsStore.getState().events,\n    onChange: (callback: (value: SegmentEvent[]) => void) =>\n      this.eventsStore.subscribe((store) => callback(store.events)),\n    add: (event: SegmentEvent | SegmentEvent[]) => {\n      const eventsToAdd = Array.isArray(event) ? event : [event];\n      this.eventsStore.dispatch((state) => ({\n        events: [...state.events, ...eventsToAdd],\n      }));\n    },\n    remove: (event: SegmentEvent | SegmentEvent[]) => {\n      this.eventsStore.dispatch((state) => {\n        const eventsToRemove = Array.isArray(event) ? event : [event];\n        const setToRemove = new Set(eventsToRemove);\n        const filteredEvents = state.events.filter((e) => !setToRemove.has(e));\n        return { events: filteredEvents };\n      });\n    },\n  };\n\n  readonly userInfo = {\n    get: () => this.userInfoStore.getState().userInfo,\n    onChange: (callback: (value: UserInfoState) => void) =>\n      this.userInfoStore.subscribe((store) => callback(store.userInfo)),\n    set: (value: UserInfoState) => {\n      this.userInfoStore.dispatch((state) => ({\n        userInfo: { ...state.userInfo, ...value },\n      }));\n    },\n  };\n}\n"]}