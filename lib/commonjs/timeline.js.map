{"version":3,"sources":["timeline.ts"],"names":["Timeline","add","plugin","type","plugins","push","settings","analytics","get","update","integrations","UpdateType","initial","remove","index","findIndex","f","splice","apply","closure","forEach","process","incomingEvent","beforeResult","applyPlugins","PluginType","before","event","undefined","enrichmentResult","enrichment","destination","afterResult","after","result","execute"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAeO,MAAMA,QAAN,CAAe;AAAA;AAAA,qCACO,EADP;AAAA;;AAGpBC,EAAAA,GAAG,CAACC,MAAD,EAAiB;AAAA;;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAWD,MAAjB;;AACA,QAAI,KAAKE,OAAL,CAAaD,IAAb,CAAJ,EAAwB;AAAA;;AACtB,iCAAKC,OAAL,CAAaD,IAAb,2EAAoBE,IAApB,CAAyBH,MAAzB;AACD,KAFD,MAEO;AACL,WAAKE,OAAL,CAAaD,IAAb,IAAqB,CAACD,MAAD,CAArB;AACD;;AACD,UAAMI,QAAQ,wBAAGJ,MAAM,CAACK,SAAV,sDAAG,kBAAkBD,QAAlB,CAA2BE,GAA3B,EAAjB;;AACA,QAAIF,QAAJ,EAAc;AACZJ,MAAAA,MAAM,CAACO,MAAP,CAAc;AAAEC,QAAAA,YAAY,EAAEJ;AAAhB,OAAd,EAA0CK,kBAAWC,OAArD;AACD;AACF;;AAEDC,EAAAA,MAAM,CAACX,MAAD,EAAiB;AACrB,UAAME,OAAO,GAAG,KAAKA,OAAL,CAAaF,MAAM,CAACC,IAApB,CAAhB;;AACA,QAAIC,OAAJ,EAAa;AACX,YAAMU,KAAK,GAAGV,OAAO,CAACW,SAAR,CAAmBC,CAAD,IAAOA,CAAC,KAAKd,MAA/B,CAAd;;AACA,UAAIY,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdV,QAAAA,OAAO,CAACa,MAAR,CAAeH,KAAf,EAAsB,CAAtB;AACD;AACF;AACF;;AAEDI,EAAAA,KAAK,CAACC,OAAD,EAAoC;AACvC,6BAAc,IAAd,EAAoBC,OAApB,CAA6BlB,MAAD,IAAYiB,OAAO,CAACjB,MAAD,CAA/C;AACD;;AAEDmB,EAAAA,OAAO,CAACC,aAAD,EAA8B;AACnC;AACA,UAAMC,YAAY,GAAG,KAAKC,YAAL,CAAkB;AACrCrB,MAAAA,IAAI,EAAEsB,kBAAWC,MADoB;AAErCC,MAAAA,KAAK,EAAEL;AAF8B,KAAlB,CAArB;;AAKA,QAAIC,YAAY,KAAKK,SAArB,EAAgC;AAC9B;AACD,KATkC,CAUnC;;;AACA,UAAMC,gBAAgB,GAAG,KAAKL,YAAL,CAAkB;AACzCrB,MAAAA,IAAI,EAAEsB,kBAAWK,UADwB;AAEzCH,MAAAA,KAAK,EAAEJ;AAFkC,KAAlB,CAAzB,CAXmC,CAgBnC;AACA;AACA;;AACA,SAAKC,YAAL,CAAkB;AAChBrB,MAAAA,IAAI,EAAEsB,kBAAWM,WADD;AAEhBJ,MAAAA,KAAK,EAAEE;AAFS,KAAlB,EAnBmC,CAwBnC;;AACA,QAAIG,WAAW,GAAG,KAAKR,YAAL,CAAkB;AAClCrB,MAAAA,IAAI,EAAEsB,kBAAWQ,KADiB;AAElCN,MAAAA,KAAK,EAAEE;AAF2B,KAAlB,CAAlB;AAKA,WAAOG,WAAP;AACD;;AAEDR,EAAAA,YAAY,OAA6D;AAAA,QAA5D;AAAErB,MAAAA,IAAF;AAAQwB,MAAAA;AAAR,KAA4D;AACvE,QAAIO,MAAgC,GAAGP,KAAvC;AAEA,UAAMvB,OAAO,GAAG,KAAKA,OAAL,CAAaD,IAAb,CAAhB;;AACA,QAAIC,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACgB,OAAR,CAAiBlB,MAAD,IAAY;AAC1B,YAAIgC,MAAJ,EAAY;AACVA,UAAAA,MAAM,GAAGhC,MAAM,CAACiC,OAAP,CAAeD,MAAf,CAAT;AACD;AACF,OAJD;AAKD;;AACD,WAAOA,MAAP;AACD;;AA3EmB","sourcesContent":["import { PluginType, SegmentEvent, UpdateType } from './types';\nimport type { Plugin } from './plugin';\nimport { getAllPlugins } from './util';\n\n/*\ntype TimelinePlugins = {\n    before?: Plugin[] | undefined;\n    enrichment?: Plugin[] | undefined;\n    destination?: Plugin[] | undefined;\n    after?: Plugin[] | undefined;\n    utility?: Plugin[] | undefined;\n}\n */\ntype TimelinePlugins = {\n  [key in PluginType]?: Plugin[];\n};\n\nexport class Timeline {\n  plugins: TimelinePlugins = {};\n\n  add(plugin: Plugin) {\n    const { type } = plugin;\n    if (this.plugins[type]) {\n      this.plugins[type]?.push(plugin);\n    } else {\n      this.plugins[type] = [plugin];\n    }\n    const settings = plugin.analytics?.settings.get();\n    if (settings) {\n      plugin.update({ integrations: settings }, UpdateType.initial);\n    }\n  }\n\n  remove(plugin: Plugin) {\n    const plugins = this.plugins[plugin.type];\n    if (plugins) {\n      const index = plugins.findIndex((f) => f === plugin);\n      if (index > -1) {\n        plugins.splice(index, 1);\n      }\n    }\n  }\n\n  apply(closure: (plugin: Plugin) => void) {\n    getAllPlugins(this).forEach((plugin) => closure(plugin));\n  }\n\n  process(incomingEvent: SegmentEvent) {\n    // apply .before and .enrichment types first ...\n    const beforeResult = this.applyPlugins({\n      type: PluginType.before,\n      event: incomingEvent,\n    });\n\n    if (beforeResult === undefined) {\n      return;\n    }\n    // .enrichment here is akin to source middleware in the old analytics-ios.\n    const enrichmentResult = this.applyPlugins({\n      type: PluginType.enrichment,\n      event: beforeResult,\n    });\n\n    // once the event enters a destination, we don't want\n    // to know about changes that happen there. those changes\n    // are to only be received by the destination.\n    this.applyPlugins({\n      type: PluginType.destination,\n      event: enrichmentResult,\n    });\n\n    // apply .after plugins ...\n    let afterResult = this.applyPlugins({\n      type: PluginType.after,\n      event: enrichmentResult,\n    });\n\n    return afterResult;\n  }\n\n  applyPlugins({ type, event }: { type: PluginType; event: SegmentEvent }) {\n    let result: SegmentEvent | undefined = event;\n\n    const plugins = this.plugins[type];\n    if (plugins) {\n      plugins.forEach((plugin) => {\n        if (result) {\n          result = plugin.execute(result);\n        }\n      });\n    }\n    return result;\n  }\n}\n"]}