{"version":3,"sources":["util.ts"],"names":["chunk","array","size","length","index","resIndex","result","Array","Math","ceil","slice","getAllPlugins","timeline","allPlugins","Object","values","plugins","reduce","prev","curr","concat","getPluginsWithFlush","eventPlugins","filter","f","flush"],"mappings":";;;;;;;AAGO,MAAMA,KAAK,GAAG,CAACC,KAAD,EAAeC,IAAf,KAAgC;AACnD,MAAI,CAACD,KAAK,CAACE,MAAP,IAAiB,CAACD,IAAtB,EAA4B;AAC1B,WAAO,EAAP;AACD;;AAED,MAAIE,KAAK,GAAG,CAAZ;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUC,IAAI,CAACC,IAAL,CAAUR,KAAK,CAACE,MAAN,GAAeD,IAAzB,CAAV,CAAf;;AAEA,SAAOE,KAAK,GAAGH,KAAK,CAACE,MAArB,EAA6B;AAC3BG,IAAAA,MAAM,CAACD,QAAQ,EAAT,CAAN,GAAqBJ,KAAK,CAACS,KAAN,CAAYN,KAAZ,EAAoBA,KAAK,IAAIF,IAA7B,CAArB;AACD;;AACD,SAAOI,MAAP;AACD,CAbM;;;;AAeA,MAAMK,aAAa,GAAIC,QAAD,IAAwB;AACnD,QAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcH,QAAQ,CAACI,OAAvB,CAAnB;;AACA,MAAIH,UAAU,CAACV,MAAf,EAAuB;AACrB,WAAOU,UAAU,CAACI,MAAX,CAAkB;AAAA,UAACC,IAAD,uEAAQ,EAAR;AAAA,UAAYC,IAAZ,uEAAmB,EAAnB;AAAA,aAA0BD,IAAI,CAACE,MAAL,CAAYD,IAAZ,CAA1B;AAAA,KAAlB,CAAP;AACD;;AACD,SAAO,EAAP;AACD,CANM;;;;AAQA,MAAME,mBAAmB,GAAIT,QAAD,IAAwB;AACzD,MAAI,CAACA,QAAL,EAAe;AACb,WAAO,EAAP;AACD;;AAED,QAAMC,UAAU,GAAGF,aAAa,CAACC,QAAD,CAAhC,CALyD,CAOzD;;AACA,QAAMU,YAAY,GAAGT,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEU,MAAZ,CAClBC,CAAD,IAAQA,CAAD,CAAmBC,KADP,CAArB;AAIA,SAAOH,YAAP;AACD,CAbM","sourcesContent":["import type { EventPlugin } from './plugin';\nimport type { Timeline } from './timeline';\n\nexport const chunk = (array: any[], size: number) => {\n  if (!array.length || !size) {\n    return [];\n  }\n\n  let index = 0;\n  let resIndex = 0;\n  const result = new Array(Math.ceil(array.length / size));\n\n  while (index < array.length) {\n    result[resIndex++] = array.slice(index, (index += size));\n  }\n  return result;\n};\n\nexport const getAllPlugins = (timeline: Timeline) => {\n  const allPlugins = Object.values(timeline.plugins);\n  if (allPlugins.length) {\n    return allPlugins.reduce((prev = [], curr = []) => prev.concat(curr));\n  }\n  return [];\n};\n\nexport const getPluginsWithFlush = (timeline: Timeline) => {\n  if (!timeline) {\n    return [];\n  }\n\n  const allPlugins = getAllPlugins(timeline);\n\n  // checking for the existence of .flush()\n  const eventPlugins = allPlugins?.filter(\n    (f) => (f as EventPlugin).flush\n  ) as EventPlugin[];\n\n  return eventPlugins;\n};\n"]}