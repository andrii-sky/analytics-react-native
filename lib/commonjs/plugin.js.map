{"version":3,"sources":["plugin.ts"],"names":["Plugin","PluginType","utility","undefined","configure","analytics","update","settings","type","execute","event","shutdown","EventPlugin","result","EventType","IdentifyEvent","identify","TrackEvent","track","ScreenEvent","screen","AliasEvent","alias","GroupEvent","group","flush","reset","DestinationPlugin","destination","Timeline","add","plugin","timeline","apply","closure","remove","UtilityPlugin","PlatformPlugin"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport type { SegmentClient } from './analytics';\nimport { Timeline } from './timeline';\nimport {\n  AliasEventType,\n  EventType,\n  GroupEventType,\n  IdentifyEventType,\n  PluginType,\n  ScreenEventType,\n  SegmentAPISettings,\n  SegmentEvent,\n  TrackEventType,\n  UpdateType,\n} from './types';\n\nexport class Plugin {\n  // default to utility to avoid automatic processing\n  type: PluginType = PluginType.utility;\n  analytics?: SegmentClient = undefined;\n\n  configure(analytics: SegmentClient) {\n    this.analytics = analytics;\n  }\n\n  // @ts-ignore\n  update(settings: SegmentAPISettings, type: UpdateType) {\n    // do nothing by default, user can override.\n  }\n\n  execute(event: SegmentEvent): SegmentEvent | undefined {\n    // do nothing.\n    return event;\n  }\n\n  shutdown() {\n    // do nothing by default, user can override.\n  }\n}\n\nexport class EventPlugin extends Plugin {\n  execute(event: SegmentEvent) {\n    if (event === undefined) {\n      return event;\n    }\n    let result = event;\n    switch (result.type) {\n      case EventType.IdentifyEvent:\n        result = this.identify(result);\n        break;\n      case EventType.TrackEvent:\n        result = this.track(result);\n        break;\n      case EventType.ScreenEvent:\n        result = this.screen(result);\n        break;\n      case EventType.AliasEvent:\n        result = this.alias(result);\n        break;\n      case EventType.GroupEvent:\n        result = this.group(result);\n        break;\n    }\n    return result;\n  }\n\n  // Default implementations that forward the event. This gives plugin\n  // implementors the chance to interject on an event.\n  identify(event: IdentifyEventType) {\n    return event;\n  }\n\n  track(event: TrackEventType) {\n    return event;\n  }\n\n  screen(event: ScreenEventType) {\n    return event;\n  }\n\n  alias(event: AliasEventType) {\n    return event;\n  }\n\n  group(event: GroupEventType) {\n    return event;\n  }\n\n  flush() {}\n\n  reset() {}\n}\n\nexport class DestinationPlugin extends EventPlugin {\n  // default to destination\n  type = PluginType.destination;\n\n  key = '';\n\n  timeline = new Timeline();\n\n  /**\n     Adds a new plugin to the currently loaded set.\n\n     - Parameter plugin: The plugin to be added.\n     - Returns: Returns the name of the supplied plugin.\n  */\n  add(plugin: Plugin) {\n    const analytics = this.analytics;\n    if (analytics) {\n      plugin.configure(analytics);\n    }\n    this.timeline.add(plugin);\n    return plugin;\n  }\n\n  /**\n     Applies the supplied closure to the currently loaded set of plugins.\n\n     - Parameter closure: A closure that takes an plugin to be operated on as a parameter.\n  */\n  apply(closure: (plugin: Plugin) => void) {\n    this.timeline.apply(closure);\n  }\n\n  configure(analytics: SegmentClient) {\n    this.analytics = analytics;\n    this.apply((plugin) => {\n      plugin.configure(analytics);\n    });\n  }\n\n  /**\n     Removes and unloads plugins with a matching name from the system.\n\n     - Parameter pluginName: An plugin name.\n  */\n  remove(plugin: Plugin) {\n    this.timeline.remove(plugin);\n  }\n\n  // find(pluginType: PluginType) {\n  //   // return this.timeline.find(pluginType);\n  // }\n}\n\nexport class UtilityPlugin extends EventPlugin {}\n\n// For internal platform-specific bits\nexport class PlatformPlugin extends Plugin {}\n"]}