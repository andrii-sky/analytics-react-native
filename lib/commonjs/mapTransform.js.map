{"version":3,"sources":["mapTransform.ts"],"names":["isDictionary","value","undefined","Array","isArray","generateMapTransform","keyMap","transformMap","mapTransform","json","result","key","newKey","map","nestedValue"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,YAAY,GAAIC,KAAD,IACnBA,KAAK,KAAK,IAAV,IACAA,KAAK,KAAKC,SADV,IAEA,OAAOD,KAAP,KAAiB,QAFjB,IAGA,CAACE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAJH;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMI,oBAAoB,GAAG,CAClCC,MADkC,EAElCC,YAFkC,KAG/B;AACH,QAAMC,YAAY,GAChBC,IADmB,IAES;AAC5B;AACA,UAAMC,MAA+B,GAAG,EAAxC;;AAEA,SAAK,MAAMC,GAAX,IAAkBF,IAAlB,EAAwB;AAAA;;AACtB,YAAMG,MAAM,kBAAGN,MAAM,CAACK,GAAD,CAAT,qDAAkBA,GAA9B;AAEA,UAAIV,KAAK,GAAGQ,IAAI,CAACE,GAAD,CAAhB;;AAEA,UAAIR,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxBA,QAAAA,KAAK,GAAGA,KAAK,CAACY,GAAN,CAAWC,WAAD,IAAiB;AACjC,cAAId,YAAY,CAACc,WAAD,CAAhB,EAA+B;AAC7B,mBAAON,YAAY,CAACM,WAAD,CAAnB;AACD;;AACD,iBAAOA,WAAP;AACD,SALO,CAAR;AAMD,OAPD,MAOO,IAAId,YAAY,CAACC,KAAD,CAAhB,EAAyB;AAC9BA,QAAAA,KAAK,GAAGO,YAAY,CAACP,KAAD,CAApB;AACD;;AAED,UAAIW,MAAM,IAAIL,YAAd,EAA4B;AAC1BN,QAAAA,KAAK,GAAGM,YAAY,CAACK,MAAD,CAAZ,CAAqBX,KAArB,CAAR;AACD;;AAEDS,MAAAA,MAAM,CAACE,MAAD,CAAN,GAAiBX,KAAjB;AACD;;AAED,WAAOS,MAAP;AACD,GA9BD;;AA+BA,SAAOF,YAAP;AACD,CApCM","sourcesContent":["/**\n * Checks if value is a dictionary like object\n * @param value unknown object\n * @returns typeguard, value is dicitonary\n */\nconst isDictionary = (value: unknown): value is Record<string, unknown> =>\n  value !== null &&\n  value !== undefined &&\n  typeof value === 'object' &&\n  !Array.isArray(value);\n\n/**\n * Generates a mapTransform function from a keymap and a transform map.\n * The resulting function can be called with any object/dictionary and return\n * a new object with key replacements and value transformations applied\n *\n * @param keyMap A dictionary of key mappings in format: ['OLD':'NEW']\n * @param transformMap A map of transformations by key (new key if the key was replaced)\n * @returns A function that maps keys from an object and transforms its values\n */\nexport const generateMapTransform = (\n  keyMap: { [key: string]: string },\n  transformMap: { [key: string]: (oldValue: any) => any }\n) => {\n  const mapTransform = (\n    json: Record<string, unknown>\n  ): Record<string, unknown> => {\n    // Clone at top level\n    const result: Record<string, unknown> = {};\n\n    for (const key in json) {\n      const newKey = keyMap[key] ?? key;\n\n      let value = json[key];\n\n      if (Array.isArray(value)) {\n        value = value.map((nestedValue) => {\n          if (isDictionary(nestedValue)) {\n            return mapTransform(nestedValue);\n          }\n          return nestedValue;\n        });\n      } else if (isDictionary(value)) {\n        value = mapTransform(value as Record<string, unknown>);\n      }\n\n      if (newKey in transformMap) {\n        value = transformMap[newKey](value);\n      }\n\n      result[newKey] = value;\n    }\n\n    return result;\n  };\n  return mapTransform;\n};\n"]}