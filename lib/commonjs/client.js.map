{"version":3,"sources":["client.tsx"],"names":["createClient","config","logger","debug","enable","disable","clientConfig","defaultConfig","segmentStore","SovranStorage","writeKey","client","SegmentClient","store","init","Context","AnalyticsProvider","children","useAnalytics","console","error","screen","track","args","log","identify","flush","group","alias","reset"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;;;;;AAEO,MAAMA,YAAY,GAAIC,MAAD,IAAoB;AAC9C,QAAMC,MAAM,GAAG,2BAAf;;AACA,MAAI,QAAOD,MAAP,aAAOA,MAAP,uBAAOA,MAAM,CAAEE,KAAf,MAAyB,SAA7B,EAAwC;AACtC,QAAIF,MAAM,CAACE,KAAX,EAAkB;AAChBD,MAAAA,MAAM,CAACE,MAAP;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,CAACG,OAAP;AACD;AACF;;AACD,QAAMC,YAAY,GAAG,EAAE,GAAGC,wBAAL;AAAoB,OAAGN;AAAvB,GAArB;AAEA,QAAMO,YAAY,GAAG,IAAIC,sBAAJ,CAAkBR,MAAM,CAACS,QAAzB,CAArB;AAEA,QAAMC,MAAM,GAAG,IAAIC,wBAAJ,CAAkB;AAC/BX,IAAAA,MAAM,EAAEK,YADuB;AAE/BJ,IAAAA,MAF+B;AAG/BW,IAAAA,KAAK,EAAEL;AAHwB,GAAlB,CAAf;AAMAG,EAAAA,MAAM,CAACG,IAAP;AAEA,SAAOH,MAAP;AACD,CAtBM;;;AAwBP,MAAMI,OAAO,gBAAG,0BAAoC,IAApC,CAAhB;;AAEO,MAAMC,iBAAiB,GAAG,QAM3B;AAAA,MAN4B;AAChCL,IAAAA,MADgC;AAEhCM,IAAAA;AAFgC,GAM5B;;AACJ,MAAI,CAACN,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAED,sBAAO,6BAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAEA;AAAzB,KAAkCM,QAAlC,CAAP;AACD,CAZM;;;;AAcA,MAAMC,YAAY,GAAG,MAAqB;AAC/C,QAAMP,MAAM,GAAG,uBAAWI,OAAX,CAAf;;AACA,MAAI,CAACJ,MAAL,EAAa;AACXQ,IAAAA,OAAO,CAACC,KAAR,CACE,gCADF,EAEE,+FAFF,EADW,CAMX;;AACA,WAAO,EAAP;AACD;;AACD,SAAO;AACLC,IAAAA,MAAM,EAAE;AAAA,aAAaV,MAAM,CAACU,MAAP,CAAc,YAAd,CAAb;AAAA,KADH;AAELC,IAAAA,KAAK,EAAE,YAAa;AAAA,wCAATC,IAAS;AAATA,QAAAA,IAAS;AAAA;;AAClBJ,MAAAA,OAAO,CAACK,GAAR,CAAY,QAAZ,EAAsBD,IAAtB;AACAZ,MAAAA,MAAM,CAACW,KAAP,CAAa,GAAGC,IAAhB;AACD,KALI;AAMLE,IAAAA,QAAQ,EAAE;AAAA,aAAad,MAAM,CAACc,QAAP,CAAgB,YAAhB,CAAb;AAAA,KANL;AAOLC,IAAAA,KAAK,EAAE,MAAMf,MAAM,CAACe,KAAP,EAPR;AAQLC,IAAAA,KAAK,EAAE;AAAA,aAAahB,MAAM,CAACgB,KAAP,CAAa,YAAb,CAAb;AAAA,KARF;AASLC,IAAAA,KAAK,EAAE;AAAA,aAAajB,MAAM,CAACiB,KAAP,CAAa,YAAb,CAAb;AAAA,KATF;AAULC,IAAAA,KAAK,EAAE,MAAMlB,MAAM,CAACkB,KAAP;AAVR,GAAP;AAYD,CAvBM","sourcesContent":["import React, { createContext, useContext } from 'react';\n\nimport { defaultConfig } from './constants';\nimport type { Config, ClientMethods } from './types';\nimport { createLogger } from './logger';\nimport { SegmentClient } from './analytics';\nimport { SovranStorage } from './storage';\n\nexport const createClient = (config: Config) => {\n  const logger = createLogger();\n  if (typeof config?.debug === 'boolean') {\n    if (config.debug) {\n      logger.enable();\n    } else {\n      logger.disable();\n    }\n  }\n  const clientConfig = { ...defaultConfig, ...config };\n\n  const segmentStore = new SovranStorage(config.writeKey);\n\n  const client = new SegmentClient({\n    config: clientConfig,\n    logger,\n    store: segmentStore,\n  });\n\n  client.init();\n\n  return client;\n};\n\nconst Context = createContext<SegmentClient | null>(null);\n\nexport const AnalyticsProvider = ({\n  client,\n  children,\n}: {\n  client?: SegmentClient;\n  children?: any;\n}) => {\n  if (!client) {\n    return null;\n  }\n\n  return <Context.Provider value={client}>{children}</Context.Provider>;\n};\n\nexport const useAnalytics = (): ClientMethods => {\n  const client = useContext(Context);\n  if (!client) {\n    console.error(\n      'Segment client not configured!',\n      'To use the useAnalytics() hook, pass an initialized Segment client into the AnalyticsProvider'\n    );\n\n    // @ts-ignore\n    return {};\n  }\n  return {\n    screen: (...args) => client.screen(...args),\n    track: (...args) => {\n      console.log('PAPAPA', args);\n      client.track(...args);\n    },\n    identify: (...args) => client.identify(...args),\n    flush: () => client.flush(),\n    group: (...args) => client.group(...args),\n    alias: (...args) => client.alias(...args),\n    reset: () => client.reset(),\n  };\n};\n"]}